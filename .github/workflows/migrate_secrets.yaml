name: Migrate GitLab to GitHub

on:
  workflow_dispatch:  # Manual trigger without inputs

env:
  TF_VERSION: 1.5.7

jobs:
  migrate_secrets:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For creating the repository
      actions: write   # For managing GitHub Actions variables

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Set Environment Variables
        run: |
          # Set secrets and Azure credentials
          echo "TF_VAR_gitlab_token=${{ secrets.GL_PAT }}" >> $GITHUB_ENV
          echo "TF_VAR_github_token=${{ secrets.GH_PAT }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV
          # Debug: Verify credentials
          echo "ARM_CLIENT_ID: $ARM_CLIENT_ID"
          echo "ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID"
          echo "ARM_TENANT_ID: $ARM_TENANT_ID"

      - name: Terraform Initial Init
        run: |
          # Use a temporary key for initial init
          terraform init -backend-config="key=statefiles/temp.tfstate" -reconfigure -lock-timeout=5m
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          TF_VAR_gitlab_token: ${{ env.TF_VAR_gitlab_token }}
          TF_VAR_github_token: ${{ env.TF_VAR_github_token }}

      - name: Set Workspace and Reconfigure Backend
        run: |
          # Fetch github_repo_name from terraform.tfvars
          WORKSPACE_NAME=$(terraform plan -var-file=terraform.tfvars -out=tfplan >/dev/null && terraform show -json tfplan | jq -r '.planned_values.root_module.variables.github_repo_name.value')
          echo "WORKSPACE_NAME=$WORKSPACE_NAME" >> $GITHUB_ENV
          echo "Workspace Name: $WORKSPACE_NAME"
          # Reconfigure backend with the correct key
          terraform init -backend-config="key=statefiles/${WORKSPACE_NAME}.tfstate" -reconfigure -lock-timeout=5m
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          TF_VAR_gitlab_token: ${{ env.TF_VAR_gitlab_token }}
          TF_VAR_github_token: ${{ env.TF_VAR_github_token }}

      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars -out=tfplan -lock-timeout=5m
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          TF_VAR_gitlab_token: ${{ env.TF_VAR_gitlab_token }}
          TF_VAR_github_token: ${{ env.TF_VAR_github_token }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          TF_VAR_gitlab_token: ${{ env.TF_VAR_gitlab_token }}
          TF_VAR_github_token: ${{ env.TF_VAR_github_token }}
