name: Migrate GitLab Secrets to GitHub and Azure Key Vault

on:
  workflow_dispatch:  # Manual trigger (you can add push, schedule, etc., as needed)
    inputs:
      confirm_apply:
        description: 'Confirm Terraform apply (yes/no)'
        required: true
        default: 'no'

env:
  TF_LOG: INFO  # Enable Terraform logging for debugging (optional)

jobs:
  migrate_secrets:
    runs-on: ubuntu-latest  # Use Windows or macOS if needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7  # Specify your Terraform version

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Use JSON credentials or remove if using environment variables below
          # Alternatively, use environment variables for service principal auth:
          # client-id: ${{ secrets.AZURE_CLIENT_ID }}
          # tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          # client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set environment variables
        run: |
          echo "GITLAB_PROJECT_PATH=${{ vars.gitlab_project_path }}" >> $GITHUB_ENV
          echo "GITHUB_OWNER=${{ vars.github_owner }}" >> $GITHUB_ENV
          echo "GITHUB_REPO_NAME=${{ vars.github_repo_name }}" >> $GITHUB_ENV
          echo "GITLAB_TOKEN=${{ secrets.GL_PAT }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GH_PAT }}" >> $GITHUB_ENV
          # Set Azure environment variables for Terraform
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: terraform init
        env:
          TF_VAR_gitlab_project_path: ${{ env.GITLAB_PROJECT_PATH }}
          TF_VAR_github_owner: ${{ env.GITHUB_OWNER }}
          TF_VAR_github_repo_name: ${{ env.GITHUB_REPO_NAME }}
          TF_VAR_gitlab_token: ${{ env.GITLAB_TOKEN }}
          TF_VAR_github_token: ${{ env.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}

      - name: Plan Terraform Changes
        run: terraform plan -out=tfplan
        env:
          TF_VAR_gitlab_project_path: ${{ env.GITLAB_PROJECT_PATH }}
          TF_VAR_github_owner: ${{ env.GITHUB_OWNER }}
          TF_VAR_github_repo_name: ${{ env.GITHUB_REPO_NAME }}
          TF_VAR_gitlab_token: ${{ env.GITLAB_TOKEN }}
          TF_VAR_github_token: ${{ env.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}

      - name: Apply Terraform Changes
        if: github.event.inputs.confirm_apply == 'yes'
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_gitlab_project_path: ${{ env.GITLAB_PROJECT_PATH }}
          TF_VAR_github_owner: ${{ env.GITHUB_OWNER }}
          TF_VAR_github_repo_name: ${{ env.GITHUB_REPO_NAME }}
          TF_VAR_gitlab_token: ${{ env.GITLAB_TOKEN }}
          TF_VAR_github_token: ${{ env.GITHUB_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}

      - name: Handle Errors
        if: failure()
        run: |
          echo "Terraform migration failed. Check logs for details."
          exit 1