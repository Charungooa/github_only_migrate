name: Migrate GitLab to GitHub

on:
  workflow_dispatch:  # Manual trigger without inputs

env:
  TF_VERSION: 1.5.7

jobs:
  migrate_secrets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      # secrets: write   # Uncomment if needed

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Set Environment Variables
        run: |
          # Set only secrets and Azure credentials, not Terraform variables
          echo "TF_VAR_gitlab_token=${{ secrets.GL_PAT }}" >> $GITHUB_ENV
          echo "TF_VAR_github_token=${{ secrets.GH_PAT }}" >> $GITHUB_ENV

          echo "TF_VAR_AZURE_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
          echo "TF_VAR_AZURE_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV
          echo "TF_VAR_AZURE_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
          echo "TF_VAR_AZURE_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV
          # Uncomment if AZURE_CLIENT_OBJECT_ID is required
          # echo "TF_VAR_AZURE_CLIENT_OBJECT_ID=${{ secrets.AZURE_CLIENT_OBJECT_ID }}" >> $GITHUB_ENV

          # Use github_repo_name from terraform.tfvars for workspace name (fetched via terraform output or default)
          # Safeguard: if 'terraform output -raw' fails, use 'github_myapp_supplychain'
          echo "WORKSPACE_NAME=$(terraform output -raw github_repo_name 2>/dev/null || echo 'github_myapp_supplychain')" >> $GITHUB_ENV

          echo "Workspace Name: ${{ env.WORKSPACE_NAME }}"
        env:
          # So terraform commands below can run without prompting for credentials
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Init
        run: |
          terraform init -backend-config="key=statefiles/${WORKSPACE_NAME}.tfstate" -reconfigure -lock-timeout=5m
        env:
          ARM_CLIENT_ID: ${{ env.TF_VAR_AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.TF_VAR_AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.TF_VAR_AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.TF_VAR_AZURE_TENANT_ID }}
          TF_VAR_gitlab_token: ${{ env.TF_VAR_gitlab_token }}
          TF_VAR_github_token: ${{ env.TF_VAR_github_token }}

      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars -out=tfplan -lock-timeout=5m
        env:
          ARM_CLIENT_ID: ${{ env.TF_VAR_AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.TF_VAR_AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.TF_VAR_AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.TF_VAR_AZURE_TENANT_ID }}
          TF_VAR_gitlab_token: ${{ env.TF_VAR_gitlab_token }}
          TF_VAR_github_token: ${{ env.TF_VAR_github_token }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ env.TF_VAR_AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.TF_VAR_AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.TF_VAR_AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.TF_VAR_AZURE_TENANT_ID }}
          TF_VAR_gitlab_token: ${{ env.TF_VAR_gitlab_token }}
          TF_VAR_github_token: ${{ env.TF_VAR_github_token }}